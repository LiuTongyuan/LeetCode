package Map;

import java.util.Scanner;

/**
 * @Author lty
 * @Date 2024/4/16 13:57
 * @Description
 */
public class Num924_minMalwareSpread {
    static class Union {
        // 第0位表示par，第二位表示初始集合有多少个感染的，第三位表示集合一共有多少元素
        int[][] par;

        Union(int n, int[] initial) {
            par = new int[n][3];
            for (int i = 0; i < n; i++) {
                par[i][0] = i;
                par[i][2] = 1;
            }
            for (int i = 0; i < initial.length; i++) {
                par[initial[i]][1] = 1;
            }
        }

        public int find(int a) {
            int start = a;
            int root = par[a][0];
            while (root != start) {
                start = root;
                root = par[start][0];
            }
            int next = par[a][0];
            while (a != next) {
                par[a][0] = root;
                a = next;
                next = par[a][0];
            }
            return root;
        }


        public void union(int a, int b) {
            int ap = find(a);
            int bp = find(b);
            if (ap == bp) {
                return;
            }
            par[bp][0] = ap;
            par[ap][1] += par[bp][1];
            par[ap][2] += par[bp][2];
        }

        public int countIni(int a) {
            return par[find(a)][1];
        }

        public int size(int a) {
            return par[find(a)][2];
        }
    }

    public static int minMalwareSpread(int[][] graph, int[] initial) {
        Union union = new Union(graph.length, initial);
        for (int i = 0; i < graph.length; i++) {
            for (int j = i + 1; j < graph.length; j++) {
                if (graph[i][j] == 1) {
                    union.union(i, j);
                }
            }
        }

        int max = 0, res = initial[0];
        for (int i = 0; i < initial.length; i++) {
            if (union.countIni(initial[i]) == 1) {
                if (union.size(initial[i]) > max) {
                    max = union.size(initial[i]);
                    res = initial[i];
                } else if (union.size(initial[i]) == max) {
                    res = Math.min(res, initial[i]);
                }
            }
            if (max == 0) {
                res = Math.min(res, initial[i]);
            }

        }
        return res;
    }

    public static void main(String[] args) {
        // String s = new Scanner(System.in).next();
        // System.out.println(s.replace('[', '{').replace(']', '}'));
        minMalwareSpread(new int[][]{{1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1}, {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0}, {0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0}, {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0}, {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0}, {0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0}, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}}, new int[]{2, 0});
    }

/**
 * {1,0,0,0,1,0,0,0,0,0,1},
 * {0,1,0,1,0,0,0,0,0,0,0},
 * {0,0,1,0,0,0,0,1,0,0,0},
 * {0,1,0,1,0,1,0,0,0,0,0},
 * {1,0,0,0,1,0,0,0,0,0,0},
 * {0,0,0,1,0,1,0,0,1,1,0},
 * {0,0,0,0,0,0,1,1,0,0,0},
 * {0,0,1,0,0,0,1,1,0,0,0},
 * {0,0,0,0,0,1,0,0,1,0,0},
 * {0,0,0,0,0,1,0,0,0,1,0},
 * {1,0,0,0,0,0,0,0,0,0,1}
 */

}
